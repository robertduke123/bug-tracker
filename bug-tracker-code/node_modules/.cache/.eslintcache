[{"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\index.js":"1","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\App.js":"2","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Signin.jsx":"3","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Register.jsx":"4","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Navbar.jsx":"5","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\NewProject.jsx":"6","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Sidebar.jsx":"7","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\NewTicket.jsx":"8","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\NewMember.jsx":"9","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Dashboard.jsx":"10","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Profile.jsx":"11","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Tickets.jsx":"12","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Project.jsx":"13","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Team.jsx":"14"},{"size":253,"mtime":1687841356690,"results":"15","hashOfConfig":"16"},{"size":25131,"mtime":1692078442182,"results":"17","hashOfConfig":"16"},{"size":2982,"mtime":1691492753188,"results":"18","hashOfConfig":"16"},{"size":5749,"mtime":1691887630872,"results":"19","hashOfConfig":"16"},{"size":676,"mtime":1692076949307,"results":"20","hashOfConfig":"16"},{"size":5400,"mtime":1690868704595,"results":"21","hashOfConfig":"16"},{"size":2413,"mtime":1690883156912,"results":"22","hashOfConfig":"16"},{"size":9031,"mtime":1691891837865,"results":"23","hashOfConfig":"16"},{"size":2426,"mtime":1691054398945,"results":"24","hashOfConfig":"16"},{"size":8343,"mtime":1691886482537,"results":"25","hashOfConfig":"16"},{"size":6045,"mtime":1691903904215,"results":"26","hashOfConfig":"16"},{"size":1673,"mtime":1692078247831,"results":"27","hashOfConfig":"16"},{"size":9306,"mtime":1691885607014,"results":"28","hashOfConfig":"16"},{"size":9024,"mtime":1691732835660,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1atctiv",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\index.js",[],[],"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\App.js",["75","76","77"],[],"import React, { Component } from 'react';\nimport SignIn from './components/Signin';\nimport Register from './components/Register';\nimport Sidebar from './components/Sidebar';\nimport Navbar from './components/Navbar';\nimport NewProject from './components/NewProject';\nimport NewMember from './components/NewMember';\nimport NewTicket from './components/NewTicket';\nimport Profile from './components/Profile';\nimport Dashboard from './components/Dashboard';\nimport Project from './components/Project';\nimport Tickets from './components/Tickets';\nimport Team from './components/Team';\nimport './App.css'\n\n\nclass App extends Component {\n  constructor() {\n    super() \n    this.state = {\n    user: {\n      id: '',\n      firstName: '',\n      lastName: '',\n      phone: '',\n      email: '',\n      position: ''\n    },\n    route: 'signin',\n    newForm: 'hidden',\n    profile: 'hidden',\n    edit: {\n      project: '',\n      state: false\n    },    \n    projects : [],\n    team: [],\n    loadedProject: {},\n    loadedTicket: {},\n    loadedMember: {}\n  }\n  }\n\n  loadUser = (data) => {\n    this.setState({user : {\n      id: data.id,\n      firstName: data.first_name,\n      lastName: data.last_name,\n      phone: data.phone,\n      email: data.email,\n      position: data.position\n    }})\n  }\n\n  loadProjectState = () => {\n    fetch('http://localhost:3000/projects')\n        .then(res => res.json())\n        .then(\n            data => {\n            if(data.length > 0){\n            this.setState({projects: data})\n            }\n        }\n        )\n  }\n\n  loadTeamState = () => {\n    fetch('http://localhost:3000/team')\n        .then(res => res.json())\n        .then(\n            data => {\n            if(data.length > 0){\n                let state = []\n            data.forEach(member => {\n              state.push({\n                id: member.id,\n                firstName: member.first_name,\n                lastName: member.last_name,\n                phone: member.phone,\n                email: member.email,\n                position: member.position\n              })\n            })\n            this.setState({team: state})\n            }\n        }\n        )\n  }\n  \n\n  routeChange = (route) => {\n    this.setState({route: route})\n  }\n\n  newFormControl = (e, control, edit) => {\n    this.setState({newForm: control})\n    if(edit) { \n      if(control === 'project') {\n        this.setState({\n      edit: {\n        project: this.state.projects[this.state.projects.findIndex(object => {return object.name === e.target.parentNode.parentNode.firstChild.innerHTML})],\n        state: true\n    }}) \n      } else if(control === 'ticket') {\n        let project = document.querySelector('.project-title h1').innerHTML\n        let projectIndex = this.state.projects.findIndex(object => {return object.name === project})\n        let ticketIndex = this.state.projects[projectIndex].tickets.findIndex(object => {return object.ticketTitle === e.target.parentNode.parentNode.firstChild.innerHTML})\n        this.setState({\n          edit: {\n            project: this.state.projects[projectIndex].tickets[ticketIndex],\n            state: true\n        }})\n        console.log(this.state.edit);\n      } else if (control === 'member') {\n        let project = document.querySelector('.project-title h1').innerHTML\n        this.setState({\n          edit: {\n            project: this.state.projects[this.state.projects.findIndex(object => {return object.name === project})].contributor,\n            state: true\n          }\n        })\n      }       \n    } else {\n      this.setState({\n      edit: {\n        project: '',\n        state: false\n    }})\n    }\n  }\n\n  profileControl = (control) => {\n    this.setState({profile: control})\n  }\n\n  editUser = (info) => {\n    fetch('http://localhost:3000/edit_team', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                oldEmail: this.state.user.email,\n                newFirst: info.firstName,\n                newLast: info.lastName,\n                newPhone: info.phone,\n                newEmail: info.email,\n                newPosition: info.position \n            })\n        })\n        .then(res => res.json())\n\n    let allProjects = this.state.projects\n    allProjects.forEach(project => {\n      if(project.contributor.includes(this.state.user.firstName + ' ' + this.state.user.lastName)){\n        let contributor = project.contributor\n        contributor.splice(contributor.indexOf(this.state.user.firstName + ' ' + this.state.user.lastName), 1)\n        contributor.push(info.firstName + ' ' + info.lastName)\n        fetch('http://localhost:3000/edit_project', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                project: project.name,\n                newName: project.name,\n                newDescription: project.description,\n                newContributor: contributor\n            })\n        })\n        .then(res => res.json())\n\n      }\n      project.tickets.forEach(ticket => {\n        if(ticket.author === this.state.user.firstName + ' ' + this.state.user.lastName) {\n          ticket.author = info.firstName + ' ' + info.lastName\n\n          let assignedDevs = ticket.assignedDevs\n        assignedDevs.splice(assignedDevs.indexOf(this.state.user.firstName + ' ' + this.state.user.lastName), 1)\n        assignedDevs.push(info.firstName + ' ' + info.lastName)\n        \n        fetch('http://localhost:3000/edit_ticket', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                ticket: ticket.ticketTitle,\n                newTicketTitle: ticket.ticketTitle,\n                newAuthor: info.firstName + ' ' + info.lastName,\n                newDescription : ticket.description,\n                newStatus : ticket.status,\n                newPriority : ticket.priority,\n                newType : ticket.type,\n                newTime : ticket.time,\n                newAssignedDevs : ticket.assignedDevs  \n            })\n        })\n        .then(res => res.json())\n      }\n      })\n    })\n\n    this.setState({user: info})\n    this.setState({projects: allProjects})\n    this.loadTeamState()\n    this.setState({profile: 'hidden'})\n  }  \n\n  editPassword = (old, newP) => {\n    \n    fetch('http://localhost:3000/edit_password', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                email: this.state.user.email,\n                oldPassword: old,\n                newPassword: newP\n            })\n        })\n        .then(res => res.json())\n\n    this.setState({profile: 'hidden'})\n  }\n\n  createProject = (projectDetails) => {\n    fetch('http://localhost:3000/projects', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                name: projectDetails.name,\n                description: projectDetails.description,\n                contributor: projectDetails.contributor\n            })\n        })\n        .then(res => res.json())\n        // .then(console.log())\n\n    this.setState(prevState => ({\n      projects: [...prevState.projects,\n        projectDetails]\n    }))\n  }\n\n  loadProject = (e) => {\n    this.setState({route: 'Projects'})\n\n    let projectName = e.target.innerHTML\n\n    this.state.projects.map(project => {\n      if(project.name === projectName) {                 \n        this.setState({loadedProject: project})\n      }\n    })\n    this.setState({loadedTicket: {}})\n  }\n  \n  loadTicket = (e) => {\n    let ticketName = e.target.innerHTML\n\n    this.state.loadedProject.tickets.map(ticket => {\n            if(ticket.ticketTitle === ticketName) {\n              this.setState({loadedTicket: ticket})\n            }\n          })\n  }\n\n  loadMember = (e) => {\n    let memberName = e.target.innerHTML\n\n    this.state.team.map(member => {\n      if(member.firstName + ' ' + member.lastName === memberName) {\n        this.setState({loadedMember: member})\n      }\n    })\n  }\n\n  emptyMember = () => {\n    this.setState({loadedMember: {}})\n  }  \n\n  addTeamMembers = (teamMembers) => {\n    let project = document.querySelector('.project-title h1').innerHTML\n    let projectIndex = this.state.projects.findIndex(object => {return object.name === project})\n    let allProjects = this.state.projects\n    let projectState = allProjects[projectIndex]\n    let projectMembers = projectState.contributor\n    teamMembers.forEach(member => {\n      if(!projectMembers.includes(member)) {\n        projectMembers.push(member)\n      }\n    })\n    projectState.contributor = projectMembers\n\n    fetch('http://localhost:3000/edit_project', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                project: project,\n                newName: projectState.name,\n                newDescription: projectState.description,\n                newContributor: projectState.contributor\n            })\n        })\n        .then(res => res.json())\n\n    allProjects[projectIndex] = projectState\n    this.setState({projects: allProjects})\n  }\n\n  createTicket = (newTicket) => {\n    let project = document.querySelector('.project-title h1').innerHTML\n    let projectIndex = this.state.projects.findIndex(object => {return object.name === project}) \n    let allProjects = this.state.projects\n    let projectState = allProjects[projectIndex]\n    let allTickets = projectState.tickets\n\n     fetch('http://localhost:3000/tickets', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                projectName: project,\n                ticketTitle: newTicket.ticketTitle,\n                author: newTicket.author,\n                description: newTicket.description,\n                status: newTicket.status,\n                priority: newTicket.priority,\n                type: newTicket.type,\n                time: newTicket.time,\n                assignedDevs: newTicket.assignedDevs\n            })\n        })\n        .then(res => res.json())\n\n    allTickets.push(newTicket)\n    projectState.tickets = allTickets\n\n    allProjects[projectIndex] = projectState\n\n    this.setState({projects: allProjects})\n  }\n\n  deleteItem = (e, version) => {\n    let project\n    let ticket\n    let member\n    let allProjects = this.state.projects\n\n    if(version === 'project') {\n      project = e.target.parentNode.parentNode.firstChild.innerHTML\n      let projectIndex = allProjects.findIndex(object => {return object.name === project}) \n\n      fetch('http://localhost:3000/delete_project', {\n            method: 'delete',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                projectName: project\n            })\n        })\n        .then(res => res.json())\n\n      allProjects.splice(projectIndex, 1)\n      this.setState({projects: allProjects})\n\n    } else if(version === 'ticket') {\n      project = document.querySelector('.project-title h1').innerHTML\n      ticket = e.target.parentNode.parentNode.firstChild.innerHTML\n      let projectIndex = allProjects.findIndex(object => {return object.name === project})   \n      let allTickets = allProjects[projectIndex].tickets  \n      let ticketIndex = allTickets.findIndex(object => {return object.ticketTitle === ticket})\n\n      fetch('http://localhost:3000/delete_ticket', {\n            method: 'delete',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                ticketName: ticket\n            })\n        })\n        .then(res => res.json())\n\n      allTickets.splice(ticketIndex, 1)\n      this.setState({projects: allProjects})\n       \n        this.setState({loadedTicket: {}})\n\n    } else if(version === 'member') {\n      project = document.querySelector('.project-title h1').innerHTML\n      member = e.target.parentNode.parentNode.firstChild.innerHTML\n      let projectIndex = allProjects.findIndex(object => {return object.name === project})   \n      let allMembers = allProjects[projectIndex].contributor\n      let memberIndex = allMembers.indexOf(member)\n      allMembers.splice(memberIndex, 1)\n\n      fetch('http://localhost:3000/edit_project', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                project: project,\n                newName: allProjects[projectIndex].name,\n                newDescription: allProjects[projectIndex].description,\n                newContributor: allMembers\n            })\n        })\n        .then(res => res.json())\n\n      this.setState({projects: allProjects})\n    } else {\n      let member = this.state.loadedMember\n      let allMembers = this.state.team\n      let memberIndex = allMembers.findIndex(object => {return object.name === member.name})\n\n      fetch('http://localhost:3000/delete_team', {\n            method: 'delete',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                email: member.email\n            })\n        })\n        .then(res => res.json())\n\n      allMembers.splice(memberIndex, 1)\n\n      this.setState({team: allMembers})\n      this.setState({loadedMember: {}})\n    }\n  }\n\n  editItem = (version, state) => {\n    let project\n    let allProjects = this.state.projects\n\n      if(version === 'project') {\n        let projectIndex = allProjects.findIndex(object => {return object.name === this.state.edit.project.name})   \n        project = allProjects[projectIndex]\n        console.log(this.state.edit);\n        fetch('http://localhost:3000/edit_project', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                project: project.name,\n                newName: state.name,\n                newDescription: state.description,\n                newContributor: state.contributor\n            })\n        })\n        .then(res => res.json())\n\n        project.name = state.name\n        project.description = state.description\n        project.contributor = state.contributor\n        this.setState({projects: allProjects})\n      } else if(version === 'ticket') {\n        project = document.querySelector('.project-title h1').innerHTML\n        let projectIndex = allProjects.findIndex(object => {return object.name === project})   \n        let allTickets = this.state.projects[projectIndex].tickets\n        let ticketIndex = allTickets.findIndex(object => {return object.ticketTitle === state.ticketTitle})\n        let ticket = allTickets[ticketIndex]\n\n        console.log(allTickets, ticketIndex, ticket, state);\n\n        fetch('http://localhost:3000/edit_ticket', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                ticket: ticket.ticketTitle,\n                newTicketTitle: state.ticketTitle,\n                newAuthor: state.author,\n                newDescription : state.description,\n                newStatus : state.status,\n                newPriority : state.priority,\n                newType : state.type,\n                newTime : state.time,\n                newAssignedDevs : state.assignedDevs  \n            })\n        })\n        .then(res => res.json())\n\n        ticket.ticketTitle = state.ticketTitle\n        ticket.author = state.author\n        ticket.description = state.description\n        ticket.status = state.status\n        ticket.priority = state.priority\n        ticket.type = state.type\n        ticket.time = state.time\n        ticket.assignedDevs = state.assignedDevs  \n        this.setState({projects: allProjects})    \n      } else {\n      let member = this.state.loadedMember\n      let allMembers = this.state.team\n      let memberIndex = allMembers.findIndex(object => {return object.firstName === member.firstName})\n\n      fetch('http://localhost:3000/edit_team', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                oldEmail: allMembers[memberIndex].email,\n                newFirst: state.firstName,\n                newLast: state.lastName,\n                newPhone: state.phone,\n                newEmail: state.email,\n                newPosition: state.position \n            })\n        })\n        .then(res => res.json())\n\n        let allProjects = this.state.projects\n    allProjects.forEach(project => {\n      if(project.contributor.includes(this.state.loadedMember.firstName + ' ' + this.state.loadedMember.lastName)){\n        let contributor = project.contributor\n        contributor.splice(contributor.indexOf(this.state.loadedMember.firstName + ' ' + this.state.loadedMember.lastName), 1)\n        contributor.push(state.firstName + ' ' + state.lastName)\n        fetch('http://localhost:3000/edit_project', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                project: project.name,\n                newName: project.name,\n                newDescription: project.description,\n                newContributor: contributor\n            })\n        })\n        .then(res => res.json())\n\n      }\n      project.tickets.forEach(ticket => {\n        console.log(this.state.loadedMember.firstName + ' ' + this.state.loadedMember.lastName, ticket.author);\n        if(ticket.author === this.state.loadedMember.firstName + ' ' + this.state.loadedMember.lastName) {\n          ticket.author = state.firstName + ' ' + state.lastName\n          console.log(ticket);\n          let assignedDevs = ticket.assignedDevs\n        assignedDevs.splice(assignedDevs.indexOf(this.state.loadedMember.firstName + ' ' + this.state.loadedMember.lastName), 1)\n        assignedDevs.push(state.firstName + ' ' + state.lastName)\n        \n        fetch('http://localhost:3000/edit_ticket', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                ticket: ticket.ticketTitle,\n                newTicketTitle: ticket.ticketTitle,\n                newAuthor: state.firstName + ' ' + state.lastName,\n                newDescription : ticket.description,\n                newStatus : ticket.status,\n                newPriority : ticket.priority,\n                newType : ticket.type,\n                newTime : ticket.time,\n                newAssignedDevs : ticket.assignedDevs  \n            })\n        })\n        .then(res => res.json())\n      }\n      })\n    })\n      \n      allMembers[memberIndex] = state  \n      this.setState({team: allMembers})\n      if(this.state.loadedMember.firstName === this.state.user.firstName) {\n        this.setState({user: state})\n      }\n\n      this.setState({projects: allProjects})\n      this.setState({loadedMember: {}})\n    }\n    }\n\n    commentAction = (e, action) => {\n    let project = document.querySelector('.project-title h1').innerHTML\n    let ticket = document.querySelector('#ticket-name').innerHTML\n    let projectIndex = this.state.projects.findIndex(object => {return object.name === project})\n    let ticketIndex = this.state.projects[projectIndex].tickets.findIndex(object => {return object.ticketTitle === ticket})    \n    let comment  \n    let deletion\n    \n    action === 'add' ? \n    comment = e.target.previousSibling.value :\n    deletion = e.target.nextSibling.innerHTML\n\n    let allProjects = this.state.projects\n    let projectState = allProjects[projectIndex]\n    let allTickets = projectState.tickets\n    let ticketState = projectState.tickets[ticketIndex]\n    let commentsState = ticketState.comments\n\n    let commentIndex = commentsState.findIndex(object => {return object.comment === deletion})\n\n    action === 'add' ? \n     fetch('http://localhost:3000/comments', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                ticketTitle: ticket,\n                user: this.state.user.firstName + ' ' + this.state.user.lastName,\n                date: new Date().toString().slice(0, -40),\n                comment: comment\n            })\n        })\n        .then(res => res.json()) :\n        fetch('http://localhost:3000/delete_comment', {\n            method: 'put',\n            headers: {'Content-Type': 'application/Json'},\n            body: JSON.stringify({\n                ticketName: ticket,\n                delText: deletion\n            })\n        })\n        .then(res => res.json())\n\n    action === 'add' ? \n    commentsState.push({\n        user: this.state.user.firstName + ' ' + this.state.user.lastName,\n        date: new Date().toString().slice(0, -40),\n        comment: comment\n      }) :      \n\n    commentsState.splice(commentIndex, 1)\n\n    let newTicketState =  {\n      ticketTitle: ticketState.ticketTitle,\n            author: ticketState.author,\n            description: ticketState.description,\n            status: ticketState.status,\n            priority: ticketState.priority,\n            type: ticketState.type,\n            time: ticketState.time,\n            assignedDevs: ticketState.assignedDevs,\n            comments: commentsState\n    }\n\n    allTickets[ticketIndex] = newTicketState\n\n    let newProjectState = {\n        name: projectState.name,\n        description: projectState.description,\n        contributor: projectState.contributor,\n        tickets: allTickets\n    }\n\n    allProjects[projectIndex] = newProjectState\n\n    this.setState({projects: allProjects})\n\n    document.querySelector('.ticket-comment input').value = ''\n  }\n\n   \n\n  render() { \n    return (\n      <div className='app'>\n        {this.state.route === 'signin' ?\n        <SignIn\n        user={this.state.user}\n        routeChange={this.routeChange} \n        loadUser={this.loadUser}\n        loadProjectState={this.loadProjectState}\n        loadTeamState={this.loadTeamState}\n        /> :\n        this.state.route === 'register' ?\n        <Register\n        user={this.state.user}\n        routeChange={this.routeChange}\n        loadUser={this.loadUser}\n        loadProjectState={this.loadProjectState}\n        loadTeamState={this.loadTeamState}\n        /> :        \n        this.state.newForm === 'project' ? \n        <NewProject \n        newFormControl={this.newFormControl} \n        projects={this.state.projects}\n        team={this.state.team} \n        createProject={this.createProject}\n        editItem={this.editItem}\n        edit={this.state.edit}\n        /> :\n        this.state.newForm === 'member' ?\n        <NewMember \n        newFormControl={this.newFormControl} \n        projects={this.state.projects}\n        team={this.state.team} \n        addTeamMembers={this.addTeamMembers}\n        editItem={this.editItem}\n        edit={this.state.edit}\n        /> : \n        this.state.newForm === 'ticket' ?\n        <NewTicket\n        user={this.state.user}\n        newFormControl={this.newFormControl} \n        projects={this.state.projects}\n        team={this.state.team} \n        createTicket={this.createTicket}\n        editItem={this.editItem}\n        edit={this.state.edit}\n        /> :\n        this.state.profile === 'Show' ?\n        <Profile\n        user={this.state.user}\n        profileControl={this.profileControl}\n        editUser={this.editUser} \n        editPassword={this.editPassword}\n        /> :\n        <div className='waste'></div>\n        }  \n        <Sidebar \n        routeChange={this.routeChange} \n        user={this.state.user} \n        />\n        <div className='main-container'>\n        <div className='shadow'></div>\n        <Navbar \n        route={this.state.route}\n        user={this.state.user}\n        profileControl={this.profileControl} \n        routeChange={this.routeChange} \n        />\n        {\n          this.state.route === 'Dashboard' ? \n          <Dashboard \n          user={this.state.user}\n          projects={this.state.projects} \n          newFormControl={this.newFormControl} \n          loadProject={this.loadProject} \n          createProjectTitle={this.createProjectTitle}\n          deleteItem={this.deleteItem}\n          /> :\n          this.state.route === 'Projects' ?\n          <Project \n          projects={this.state.projects} \n          team={this.state.team} \n          loadedProject={this.state.loadedProject} \n          loadedTicket={this.state.loadedTicket} \n          loadTicket={this.loadTicket}\n          commentAction={this.commentAction}\n          newFormControl={this.newFormControl}\n          deleteItem={this.deleteItem}\n          /> :\n          this.state.route === 'Tickets' ?\n          <Tickets\n          user={this.state.user}\n          projects={this.state.projects} \n          loadProject={this.loadProject} \n          /> :\n          <Team\n          team={this.state.team}\n          loadedMember={this.state.loadedMember}\n          loadMember={this.loadMember}\n          editItem={this.editItem}\n          deleteItem={this.deleteItem}\n          emptyMember={this.emptyMember}\n          />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;\n","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Signin.jsx",[],[],"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Register.jsx",[],[],"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Navbar.jsx",["78","79","80"],[],"import React from 'react';\r\nimport bell from '../img/icons8-bell-24.png'\r\nimport accountImg from '../img/icons8-user-64.png'\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return(\r\n        <div className='nav'>\r\n\r\n            <h1 style={{fontWeight: 'bolder', marginLeft: '500px'}}>{props.route}</h1>\r\n\r\n            <div className='nav-right'>\r\n                {/* <a href=\"#\">Notification <img src={bell}/></a> */}\r\n                <a href=\"#\" onClick={() => props.profileControl('Show')}>User Profile <img src={accountImg}/></a>\r\n                <div className=\"btn\" onClick={() => props.routeChange('signin')} >Log Out</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\NewProject.jsx",[],[],"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Sidebar.jsx",[],[],"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\NewTicket.jsx",[],[],"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\NewMember.jsx",[],[],"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Dashboard.jsx",[],[],"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Profile.jsx",[],[],"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Tickets.jsx",[],[],"C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Project.jsx",["81","82","83"],[],"import React from 'react';\r\n\r\ndocument.onclick = function() {\r\n    let editMenu = document.querySelectorAll('.edit-container')\r\n    editMenu.forEach(menu => {\r\n        if (menu.className === 'edit-container open') {\r\n            \r\n            menu.className = 'edit-container closing'\r\n        }\r\n    })\r\n    }  \r\n\r\n     function edit(e) {\r\n        e.stopPropagation()\r\n        e.currentTarget.nextSibling.className = 'edit-container open'\r\n        let position = e.currentTarget.getBoundingClientRect()\r\n        e.currentTarget.nextSibling.style.top = `${position.top}px`\r\n        e.currentTarget.nextSibling.style.left = `${position.right - 100}px`\r\n\r\n    }\r\n\r\nexport default function Project(props) {\r\n\r\n    function changeColor(e) {\r\n        let items = document.querySelectorAll('.ticket-item')\r\n        let count = 0\r\n        items.forEach(item => {\r\n           if (item.className === 'ticket-item yes') {\r\n            count++\r\n           }\r\n           if(count === 1) {\r\n            items.forEach(item => item.className = 'ticket-item no')\r\n           }\r\n        })\r\n            e.currentTarget.parentNode.className === 'ticket-item no' ? \r\n            e.currentTarget.parentNode.className = 'ticket-item yes' :\r\n            e.currentTarget.parentNode.className = 'ticket-item no'\r\n        }\r\n\r\n\r\n        function allColor(e) {\r\n            if(e.currentTarget.parentNode.parentNode.className === 'ticket-item yes') {\r\n               let items = document.querySelectorAll('.ticket-item')\r\n                items.forEach(item => item.className = 'ticket-item no') \r\n            }\r\n            \r\n        }\r\n\r\n     \r\n    let projects = props.projects\r\n    \r\n    \r\n\r\n    return(\r\n        <div>\r\n            {\r\n                projects.map(project => {\r\n       if (project.name === props.loadedProject.name) {return(\r\n        <div className='project'>\r\n            <div className=\"project-title\">\r\n                <h1>{project.name}</h1>\r\n                <p>{project.description}</p>\r\n            </div>\r\n            <div className=\"project-main\">\r\n                <div className=\"team-container\">\r\n                    <div className=\"team-head\">\r\n                        <h2>Team</h2>\r\n                        <div className=\"btn\" onClick={(e) => props.newFormControl(e, 'member', false)}>New Member</div>\r\n                    </div>\r\n                    <div className='project-list-name'>\r\n                        <h2>NAME</h2>\r\n                        <h2>EMAIL</h2>\r\n                        <h2>PHONE</h2>\r\n                    </div>\r\n\r\n                    <ul>\r\n                        {project.contributor.map(contributor => {\r\n                            return (props.team.map(member => {\r\n                            if(member.firstName + ' ' + member.lastName === contributor) {\r\n                                return(\r\n                                    <li key={`item ${(props.projects.indexOf(project) + 1)}`} className='project-item'>\r\n                                        <h2>{member.firstName + ' ' + member.lastName}</h2>\r\n                                        <p>{member.email}</p>\r\n                                        <p>{member.phone}</p>\r\n                                        <div className=\"edit\" onClick={(e) => edit(e)}>...</div>\r\n                                        <ul className=\"edit-container closing\" id='mem-edit'>\r\n                                            <li onClick={(e) => props.deleteItem(e, 'member')}>delete</li>\r\n                                        </ul>\r\n                                    </li>\r\n                                )}\r\n                            \r\n                        })) \r\n                        })}\r\n                    </ul>\r\n\r\n                </div>\r\n                <div className=\"tickets-container\">\r\n                    <div className=\"ticket-head\">\r\n                        <h2>Tickets</h2>\r\n                        <div className=\"btn\" onClick={(e) => props.newFormControl(e, 'ticket')}>New Ticket</div>\r\n                    </div>\r\n\r\n                    <div className='project-list-name'>\r\n                            <h2>TICKET TITLE</h2>\r\n                            <h2>DESCRIPTION</h2>\r\n                            <h2>TICKET AUTHOR</h2>\r\n                        </div>\r\n\r\n                    <ul>\r\n                    {project.tickets ?\r\n                    project.tickets.map(ticket => {\r\n                        return(\r\n                            <li key={`item ${(props.projects.indexOf(project) + 1)}`} className='ticket-item no'>\r\n                                <h2 onMouseDown={(e) => props.loadTicket(e)} onMouseUp={(e) => changeColor(e)}>{ticket.ticketTitle}</h2>\r\n                                <p>{ticket.description}</p>\r\n                                <p>{ticket.author}</p>\r\n                                <div className=\"edit\" onClick={(e) => edit(e)}>...</div>\r\n                                <ul className=\"edit-container closing\">\r\n                                    <li onClick={(e) => props.newFormControl(e, 'ticket', edit)}>edit</li>\r\n                                    <li onMouseDown={(e) => allColor(e)} onMouseUp={(e) => props.deleteItem(e, 'ticket')}>delete</li>\r\n                                </ul>\r\n                            </li>\r\n                        )}\r\n                    ): (<div></div>)}\r\n                    </ul>\r\n                </div>\r\n            </div>   \r\n            \r\n            {props.loadedTicket.ticketTitle ? \r\n                <div className=\"ticket-info-container\">                    \r\n                <h2>Selected Ticket Info</h2>\r\n                <div className=\"ticket-info\">\r\n                    <div className=\"ticket-titles\">\r\n                        <h2>TICKET TITLE</h2>\r\n                        <h2>AUTHOR</h2>\r\n                        <h2>DESCRIPTION</h2>\r\n                    </div>\r\n                    \r\n                    <div className=\"ticket-title-answers\">\r\n                        <h2 id='ticket-name'>{props.loadedTicket.ticketTitle}</h2>\r\n                        <h2>{props.loadedTicket.author}</h2>\r\n                        <h2>{props.loadedTicket.description}</h2>\r\n                    </div>\r\n\r\n                    <div className=\"ticket-stats\">\r\n                        <h2>STATUS</h2>\r\n                        <h2>PRIORITY</h2>\r\n                        <h2>TYPE</h2>\r\n                        <h2>TIME ESTIMATED (HOURS)</h2>\r\n                    </div>\r\n\r\n                    <div className=\"ticket-stats-answers\">\r\n                        <div className=\"badge\">{props.loadedTicket.status}</div>\r\n                        <div className=\"badge\">{props.loadedTicket.priority}</div>\r\n                        <div className=\"badge\">{props.loadedTicket.type}</div>\r\n                        <h2>{props.loadedTicket.time}</h2>\r\n                    </div>\r\n\r\n                    \r\n\r\n                    <div className=\"author-container\">\r\n                        <h2>ASSIGNED DEVS</h2>\r\n                        <h2>{props.loadedTicket.assignedDevs.join(', ')}</h2>\r\n                    </div>\r\n                </div>\r\n                <div className=\"ticket-info\">\r\n                    <h2>Comments</h2>\r\n                    <div className=\"comment-container\">\r\n                    {props.loadedTicket.ticketTitle ?\r\n                    projects.map(project => {\r\n                            let projectName = props.loadedProject.name\r\n                            if(project.name === projectName) {\r\n                                return (project.tickets.map(ticket => {\r\n                                    let ticketName = props.loadedTicket.ticketTitle\r\n                                    if(ticket.ticketTitle === ticketName) {\r\n                                        return(ticket.comments.map(comment => {\r\n                                            return(\r\n                                                    <div className=\"comment\">\r\n                                                        <h2>{comment.user} on {comment.date}</h2>\r\n                                                        <div className=\"delete\" onClick={(e) => props.commentAction(e, 'delete')}>X</div>\r\n                                                        <p>{comment.comment}</p>  \r\n                                                    </div>     \r\n                                            )\r\n                                        })\r\n                                        )\r\n                                    }\r\n                                }))\r\n                            }\r\n                        }) : <div className='waste'></div>\r\n                    }\r\n                    </div>  \r\n                    <div className=\"ticket-comment\">\r\n                        <input type=\"text\" placeholder='Enter Comment'/>\r\n                        <div className=\"submit\" onClick={(e) => props.commentAction(e, 'add')}>Comment</div>\r\n                    </div>\r\n                </div>\r\n            </div> :\r\n            <div className=\"ticket-info-container\">                    \r\n                <h2>Selected Ticket Info</h2>\r\n            </div>    \r\n            }                \r\n        </div>\r\n        )} else {return false}\r\n    })\r\n            }\r\n        </div>        \r\n            \r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\robdu\\Desktop\\port\\bug\\bug-tracker-v2\\src\\components\\Team.jsx",[],[],{"ruleId":"84","severity":1,"message":"85","line":244,"column":37,"nodeType":"86","messageId":"87","endLine":244,"endColumn":39},{"ruleId":"84","severity":1,"message":"85","line":255,"column":49,"nodeType":"86","messageId":"87","endLine":255,"endColumn":51},{"ruleId":"84","severity":1,"message":"85","line":265,"column":32,"nodeType":"86","messageId":"87","endLine":265,"endColumn":34},{"ruleId":"88","severity":1,"message":"89","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":12},{"ruleId":"92","severity":1,"message":"93","line":14,"column":17,"nodeType":"94","endLine":14,"endColumn":74},{"ruleId":"95","severity":1,"message":"96","line":14,"column":87,"nodeType":"94","endLine":14,"endColumn":110},{"ruleId":"84","severity":1,"message":"97","line":78,"column":59,"nodeType":"86","messageId":"98","endLine":78,"endColumn":61},{"ruleId":"84","severity":1,"message":"97","line":170,"column":42,"nodeType":"86","messageId":"98","endLine":170,"endColumn":44},{"ruleId":"84","severity":1,"message":"97","line":173,"column":68,"nodeType":"86","messageId":"98","endLine":173,"endColumn":70},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'bell' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd"]